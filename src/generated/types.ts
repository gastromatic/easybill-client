/* eslint-disable no-use-before-define */
/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/stocks': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
          /** Filter stock entries by position id. */
          position_id?: unknown;
          /** Filter stock entries by document id. */
          document_id?: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Stocks'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['Stock'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['Stock'];
        };
        /** Invalid position_id or stock_count */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/stocks/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of the stock entry that needs to be fetched */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Stock'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/serial-numbers': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
          /** Filter serial numbers by position id. */
          position_id?: unknown;
          /** Filter serial numbers by document id. */
          document_id?: unknown;
          /** Filter serial numbers by usage. */
          in_use?: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['SerialNumbers'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body?: definitions['SerialNumber'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['SerialNumber'];
        };
        /** Invalid PositionID */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/serial-numbers/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of the serial number that needs to be fetched */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['SerialNumber'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of the serial number that needs to be deleted */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Serial number in use. Operation failed. */
        400: unknown;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/logins': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Logins'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/logins/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of the login that needs to be fetched */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Login'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/customers': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
          /** Filter customers by group_id. You can add multiple group ids separate by comma like id,id,id. */
          group_id?: unknown;
          /** Filter customers by additional_group_id. You can add multiple group ids separate by comma like id,id,id. */
          additional_group_id?: unknown;
          /** Filter customers by number. You can add multiple numbers separate by comma like no,no,no. */
          number?: unknown;
          /** Filter customers by country. You can add multiple countries separate by comma like DE,PL,FR. */
          country?: unknown;
          /** Filter customers by zip_code. You can add multiple zip codes separate by comma like zip,zip,zip. */
          zip_code?: unknown;
          /** Filter customers by emails. You can add multiple emails separate by comma like mail,mail,mail. */
          emails?: unknown;
          /** Filter customers by first_name. You can add multiple names separate by comma like name,name,name. */
          first_name?: unknown;
          /** Filter customers by first_name. You can add multiple names separate by comma like name,name,name. */
          last_name?: unknown;
          /** Filter customers by first_name. You can add multiple names separate by comma like name,name,name. */
          company_name?: unknown;
          /** Filter customers by created_at. You can filter one date with created_at=2014-12-10 or between like 2015-01-01,2015-12-31. */
          created_at?: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Customers'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['Customer'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['Customer'];
        };
        /** Invalid Customer */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/customers/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of customer that needs to be fetched */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Customer'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of customer that needs to be updated */
          id: unknown;
        };
        body: {
          body: definitions['Customer'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Customer'];
        };
        /** Invalid Customer */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of customer that needs to be deleted */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/customers/{customerId}/contacts': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
        };
        path: {
          /** ID of customer that needs to be fetched */
          customerId: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Contacts'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        path: {
          /** ID of customer */
          customerId: unknown;
        };
        body: {
          body?: definitions['Contact'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Contact'];
        };
        /** Invalid contact */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/customers/{customerId}/contacts/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of customer */
          customerId: unknown;
          /** ID of contact */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Contact'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of customer */
          customerId: unknown;
          /** ID of contact */
          id: unknown;
        };
        body: {
          body?: definitions['Contact'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Contact'];
        };
        /** Invalid contact */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of customer */
          customerId: unknown;
          /** ID of contact */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/discounts/position': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
          /** Filter discounts by customer_id. You can add multiple customer_ids separate by comma like id,id,id. */
          customer_id?: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['DiscountPositions'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['DiscountPosition'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['DiscountPosition'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/discounts/position/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of the discount */
          id: unknown;
        };
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['DiscountPosition'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of the to be soon updated discount */
          id: unknown;
        };
        body: {
          body?: definitions['DiscountPosition'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['DiscountPosition'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of the to be soon deleted discount */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/discounts/position-group': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
          /** Filter discounts by customer_id. You can add multiple customer_ids separate by comma like id,id,id. */
          customer_id?: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['DiscountPositionGroups'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['DiscountPositionGroup'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['DiscountPositionGroup'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/discounts/position-group/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of the discount */
          id: unknown;
        };
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['DiscountPositionGroup'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of the to be soon updated discount */
          id: unknown;
        };
        body: {
          body?: definitions['DiscountPositionGroup'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['DiscountPositionGroup'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of the to be soon deleted discount */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/documents': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
          /** Filter documents by type. Multiple typs seperate with , like type=INVOICE,CREDIT. */
          type?: unknown;
          /** Filter documents by draft flag. */
          is_draft?: unknown;
          /** Filter documents by archive flag. */
          is_archive?: unknown;
          /** Filter documents by customer_id. You can add multiple customer_is separate by comma like id,id,id. */
          customer_id?: unknown;
          /** Filter documents by project_id. You can add multiple project_id separate by comma like id,id,id. */
          project_id?: unknown;
          /** Filter documents by document_date. You can filter one date with document_date=2014-12-10 or between like 2015-01-01,2015-12-31. */
          document_date?: unknown;
          /** Filter documents by paid_at. You can filter one date with paid_at=2014-12-10 or between like 2015-01-01,2015-12-31. With paid_at=null you get all unpaid documents. */
          paid_at?: unknown;
          /** Filter documents by title. */
          title?: unknown;
          /** Filter documents by number. */
          number?: unknown;
          /** Filter documents by cancel_id. You can add multiple ids separate by comma like id,id,id. With cancel_id=null you get all not canceled documents. */
          cancel_id?: unknown;
          /** Filter documents by fulfillment_country. */
          fulfillment_country?: unknown;
          /** Filter documents by vat_country. */
          vat_country?: unknown;
          /** Filter documents by shipping_country. */
          shipping_country?: unknown;
          /** Filter documents by status. Keep in mind that not every document type has a status. */
          status?: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Documents'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['Document'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['Document'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/documents/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of document */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Document'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of document */
          id: unknown;
        };
        query: {
          /** Forces refreshing of the customer data. */
          refresh_customer_data?: unknown;
        };
        body: {
          body: definitions['Document'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Document'];
        };
        /** Invalid Document */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of document */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/documents/{id}/done': {
    put: {
      parameters: {
        path: {
          /** ID of document */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Document'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/documents/{id}/cancel': {
    post: {
      parameters: {
        path: {
          /** ID of document */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Document'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/documents/{id}/send/{type}': {
    post: {
      parameters: {
        path: {
          /** ID of document */
          id: unknown;
          type: unknown;
        };
        body: {
          body: definitions['PostBoxRequest'];
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/documents/{id}/pdf': {
    get: {
      parameters: {
        path: {
          /** ID of document */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: string;
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/customer-groups': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['CustomerGroups'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['CustomerGroup'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['CustomerGroup'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/customer-groups/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of customer group */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['CustomerGroup'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of customer goup */
          id: unknown;
        };
        body: {
          body: definitions['CustomerGroup'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['CustomerGroup'];
        };
        /** Invalid customer group */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of customer group */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/tasks': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Tasks'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['Task'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['Task'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/tasks/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of task */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Task'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of task */
          id: unknown;
        };
        body: {
          body: definitions['Task'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Task'];
        };
        /** Invalid task */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of task */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/projects': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
          /** Filter projects by customer_id. You can add multiple ids separate by comma like id,id,id. */
          customer_id?: unknown;
          /** Filter projects by status. */
          status?: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Projects'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['Project'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['Project'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/projects/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of project */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Project'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of project */
          id: unknown;
        };
        body: {
          body: definitions['Project'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Project'];
        };
        /** Invalid project */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of project */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/positions': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
          /** Filter positions by type. */
          type?: unknown;
          /** Filter positions by number. You can add multiple numbers separate by comma like no,no,no. */
          number?: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Positions'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['Position'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['Position'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/positions/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of position */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Position'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of position */
          id: unknown;
        };
        body: {
          body: definitions['Position'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Position'];
        };
        /** Invalid position */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of position */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/position-groups': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['PositionGroups'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['PositionGroup'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['PositionGroup'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/position-groups/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of position group */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['PositionGroup'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of position goup */
          id: unknown;
        };
        body: {
          body: definitions['PositionGroup'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['PositionGroup'];
        };
        /** Invalid position group */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of position group */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/time-trackings': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
          /** Filter time-tracking by login_id. You can add multiple ids separate by comma like id,id,id. */
          login_id?: unknown;
          /** Filter time-tracking by project_id. You can add multiple ids separate by comma like id,id,id. */
          project_id?: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['TimeTrackings'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['TimeTracking'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['TimeTracking'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/time-trackings/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of time tracking */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['TimeTracking'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of time tracking */
          id: unknown;
        };
        body: {
          body: definitions['TimeTracking'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['TimeTracking'];
        };
        /** Invalid time tracking */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of time tracking */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/text-templates': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['TextTemplates'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['TextTemplate'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['TextTemplate'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/text-templates/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of text template */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['TextTemplate'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of text template */
          id: unknown;
        };
        body: {
          body: definitions['TextTemplate'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['TextTemplate'];
        };
        /** Invalid text template */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of text template */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/attachments': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Attachments'];
        };
      };
    };
    post: {
      parameters: {
        formData: {
          file: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Attachment'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/attachments/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of attachment */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Attachment'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of attachment */
          id: unknown;
        };
        body: {
          body: definitions['Attachment'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['Attachment'];
        };
        /** Invalid attachment */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of attachment */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/attachments/{id}/content': {
    get: {
      parameters: {
        path: {
          /** ID of attachment */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: string;
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/document-payments': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
          /** Filter payments by document_id. You can add multiple ids separate by comma like id,id,id. */
          document_id?: unknown;
          /** Filter payments by payment_at. You can filter one date with payment_at=2014-12-10 or between like 2015-01-01,2015-12-31. */
          payment_at?: unknown;
          /** Filter payments by reference. You can add multiple references separate by comma like id,id,id. */
          reference?: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['DocumentPayments'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['DocumentPayment'];
        };
        query: {
          /** Mark document as paid when amount less then payment amount. */
          paid?: unknown;
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['DocumentPayment'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/document-payments/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of document payment */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['DocumentPayment'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of document payment */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/post-boxes': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
          /** Filter post boxes by type. Multiple typs seperate with , like type=EMAIL,FAX. */
          type?: unknown;
          /** Filter post boxes by status. */
          status?: unknown;
          /** Filter post boxes by document_id. You can add multiple document ids separate by comma like id,id,id. */
          document_id?: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['PostBoxes'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/post-boxes/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of post box */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['PostBox'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of post box */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/sepa-payments': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
          /** Filter SEPA payment by document_id. You can add multiple ids separate by comma like id,id,id. */
          document_id?: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['SEPAPayments'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['SEPAPayment'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['SEPAPayment'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/sepa-payments/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of SEPA payment */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['SEPAPayment'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of SEPA payment */
          id: unknown;
        };
        body: {
          body: definitions['SEPAPayment'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['SEPAPayment'];
        };
        /** Invalid SEPA payment */
        400: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of SPEA payment */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/webhooks': {
    get: {
      parameters: {
        query: {
          /** Limited the result. Default is 100. Maximum can be 1000. */
          limit?: parameters['LIMIT'];
          /** Set current Page. Default is 1. */
          page?: parameters['PAGE'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['WebHooks'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          body: definitions['WebHook'];
        };
      };
      responses: {
        /** Successful operation */
        201: {
          schema: definitions['WebHook'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/webhooks/{id}': {
    get: {
      parameters: {
        path: {
          /** ID of WebHook */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['WebHook'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    put: {
      parameters: {
        path: {
          /** ID of WebHook */
          id: unknown;
        };
        body: {
          body: definitions['WebHook'];
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['WebHook'];
        };
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
    delete: {
      parameters: {
        path: {
          /** ID of WebHook */
          id: unknown;
        };
      };
      responses: {
        /** Successful operation */
        204: never;
        /** Not found */
        404: unknown;
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
  '/pdf-templates': {
    get: {
      responses: {
        /** Successful operation */
        200: {
          schema: definitions['PDFTemplates'];
        };
        /** Too Many Requests */
        429: unknown;
      };
    };
  };
}

export interface definitions {
  List: {
    /** The current page */
    page: number;
    /** Max possible pages */
    pages: number;
    /** Items limitation. Max 1000 */
    limit: number;
    /** Total Items */
    total: number;
  };
  Customer: {
    /** 1 = Empfehlung eines anderen Kunden, 2 = Zeitungsanzeige, 3 = Eigene Akquisition, 4 = Mitarbeiter Akquisition, 5 = Google, 6 = Gelbe Seiten, 7 = Kostenlose Internet Plattform, 8 = Bezahlte Internet Plattform */
    acquire_options?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8;
    additional_groups_ids?: number[];
    bank_account?: string;
    bank_account_owner?: string;
    bank_bic?: string;
    bank_code?: string;
    bank_iban?: string;
    bank_name?: string;
    birth_date?: string;
    cash_allowance?: number;
    cash_allowance_days?: number;
    cash_discount?: number;
    cash_discount_type?: 'PERCENT' | 'AMOUNT';
    city?: string;
    state?: string;
    company_name: string;
    country?: string;
    created_at?: string;
    updated_at?: string;
    delivery_title?: string;
    delivery_city?: string;
    delivery_state?: string;
    delivery_company_name?: string;
    delivery_country?: string;
    delivery_first_name?: string;
    delivery_last_name?: string;
    delivery_personal?: boolean;
    /** 0 = nothing, 1 = Mr, 2 = Mrs, 3 = Company, 4 = Mr & Mrs, 5 = Married couple, 6 = Family */
    delivery_salutation?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    delivery_street?: string;
    delivery_suffix_1?: string;
    delivery_suffix_2?: string;
    delivery_zip_code?: string;
    display_name?: string;
    emails?: string[];
    fax?: string;
    first_name?: string;
    /** will be replaced by its alias due_in_days. */
    grace_period?: number;
    /** due date in days */
    due_in_days?: number;
    group_id?: number;
    id?: number;
    info_1?: string;
    info_2?: string;
    internet?: string;
    last_name: string;
    login_id?: number;
    mobile?: string;
    note?: string;
    /** Automatically generated if empty. */
    number?: string;
    /** 1 = Stets pünktliche Zahlung, 2 = überwiegend pünktliche Zahlung, 3 = überwiegend verspätete Zahlung, 5 = Grundsätzlich verspätete Zahlung */
    payment_options?: 1 | 2 | 3 | 5;
    personal?: boolean;
    phone_1?: string;
    phone_2?: string;
    postbox?: string;
    postbox_city?: string;
    postbox_state?: string;
    postbox_country?: string;
    postbox_zip_code?: string;
    sale_price_level?:
      | 'SALEPRICE2'
      | 'SALEPRICE3'
      | 'SALEPRICE4'
      | 'SALEPRICE5'
      | 'SALEPRICE6'
      | 'SALEPRICE7'
      | 'SALEPRICE8'
      | 'SALEPRICE9'
      | 'SALEPRICE10';
    /** 0 = nothing, 1 = Mr, 2 = Mrs, 3 = Company, 4 = Mr & Mrs, 5 = Married couple, 6 = Family */
    salutation?: 0 | 1 | 2 | 3 | 4 | 5 | 6;
    /** BASIC = SEPA-Basislastschrift, COR1 = SEPA-Basislastschrift COR1, COMPANY = SEPA-Firmenlastschrift, NULL = Noch kein Mandat erteilt */
    sepa_agreement?: 'BASIC' | 'COR1' | 'COMPANY' | 'NULL';
    sepa_agreement_date?: string;
    sepa_mandate_reference?: string;
    since_date?: string;
    street?: string;
    suffix_1?: string;
    suffix_2?: string;
    tax_number?: string;
    court?: string;
    court_registry_number?: string;
    /** nStb = Nicht steuerbar (Drittland), nStbUstID = Nicht steuerbar (EU mit USt-IdNr.), nStbNoneUstID = Nicht steuerbar (EU ohne USt-IdNr.), revc = Steuerschuldwechsel §13b (Inland), IG = Innergemeinschaftliche Lieferung, AL = Ausfuhrlieferung, sStfr = sonstige Steuerbefreiung, NULL = Umsatzsteuerpflichtig */
    tax_options?:
      | 'nStb'
      | 'nStbUstID'
      | 'nStbNoneUstID'
      | 'nStbIm'
      | 'revc'
      | 'IG'
      | 'AL'
      | 'sStfr'
      | 'NULL';
    title?: string;
    vat_identifier?: string;
    zip_code?: string;
    /** Type of PDF to use when sending a Document to the Customer. */
    documentPdfType?: 'default' | 'zugferd1' | 'zugferd2' | 'xrechnung' | 'xrechnung_xml';
  };
  /** A snapshot of the customer model which belongs to a document. This model is readonly and the state is final after finalization of the document. It's is identical to the state of the customer model at the time of finalization. Updates to the actual customer dataset won't affect this snapshot, however if you update the document the customer and therefore the customer snapshot may reflect a different state. */
  CustomerSnapshot: definitions['Customer'];
  Customers: definitions['List'] & {
    items?: definitions['Customer'][];
  };
  Contact: {
    city: string;
    state?: string;
    company_name?: string;
    /** Two-letter country code */
    country?: string;
    department?: string;
    emails?: string[];
    fax?: string;
    first_name?: string;
    id?: number;
    last_name?: string;
    login_id?: number;
    mobile?: string;
    note?: string;
    personal?: boolean;
    phone_1?: string;
    phone_2?: string;
    /** 0: empty<br/> 1: Herrn<br/> 2: Frau<br/> 3: Firma<br/> 4: Herrn und Frau<br/> 5: Eheleute<br/> 6: Familie */
    salutation?: number;
    street: string;
    suffix_1?: string;
    suffix_2?: string;
    title?: string;
    zip_code?: string;
    created_at?: string;
    updated_at?: string;
  };
  Contacts: definitions['List'] & {
    items?: definitions['Contact'][];
  };
  DocumentPosition: {
    number?: string;
    description?: string;
    /** This field can be used in the document text areas with the liquid placeholder {{document.item_notes}}. Every note is only displayed once for every kind of product. This is useful if you want to add something like an instruction. */
    document_note?: string;
    quantity?: number;
    /** Use quantity_str if you want to set a quantity like: 1:30 h or 3x5 m. quantity_str overwrites quantity. */
    quantity_str?: string;
    unit?: string;
    type?: 'POSITION' | 'POSITION_NOCALC' | 'TEXT';
    /** Automatic by default (first item: 1, second item: 2, ...) */
    position?: number;
    single_price_net?: number;
    single_price_gross?: number;
    vat_percent?: number;
    discount?: number;
    discount_type?: 'PERCENT' | 'AMOUNT';
    /** If set, values are copied from the referenced position */
    position_id?: number;
    total_price_net?: number;
    total_price_gross?: number;
    total_vat?: number;
    serial_number_id?: string;
    serial_number?: string;
    booking_account?: string;
    export_cost_1?: string;
    export_cost_2?: string;
    cost_price_net?: number;
    cost_price_total?: number;
    cost_price_charge?: number;
    cost_price_charge_type?: 'PERCENT' | 'AMOUNT';
    itemType?: 'PRODUCT' | 'SERVICE' | 'UNDEFINED';
    id?: number;
  };
  DocumentAddress: {
    /** 0: empty<br/> 1: Herrn<br/> 2: Frau<br/> 3: Firma<br/> 4: Herrn und Frau<br/> 5: Eheleute<br/> 6: Familie */
    salutation?: number;
    personal?: boolean;
    title?: string;
    first_name?: string;
    last_name?: string;
    suffix_1?: string;
    suffix_2?: string;
    company_name?: string;
    street?: string;
    zip_code?: string;
    city?: string;
    state?: string;
    country?: string;
  };
  DocumentRecurring: {
    /** Must be in the future */
    next_date: string;
    frequency?: 'DAILY' | 'WEEKLY' | 'MONTHLY' | 'YEARLY';
    frequency_special?: 'LASTDAYOFMONTH';
    interval?: number;
    /** Date of last exectution day or number of times to exectute */
    end_date_or_count?: string;
    status?: 'RUNNING' | 'PAUSE' | 'STOP' | 'WAITING';
    as_draft?: boolean;
    is_notify?: boolean;
    send_as?: 'EMAIL' | 'FAX' | 'POST';
    is_sign?: boolean;
    is_paid?: boolean;
    /** Option is used to determine what date is used for the payment if is_paid is true. "next_valid_date" selects the next workday in regards to the created date of the document if the date falls on a saturday or sunday. */
    paid_date_option?: 'created_date' | 'due_date' | 'next_valid_date';
    is_sepa?: boolean;
    sepa_local_instrument?: 'CORE' | 'COR1' | 'B2B';
    sepa_sequence_type?: 'FRST' | 'OOFF' | 'FNAL' | 'RCUR';
    sepa_reference?: string;
    sepa_remittance_information?: string;
    /** The document type that will be generated. Can not be changed on existing documents. */
    target_type?: 'INVOICE' | 'CREDIT' | 'ORDER' | 'OFFER';
  };
  ServiceDate: {
    /** With DEFAULT no other fields are required and this message will be printed: 'Invoice date coincides with the time of supply'.<br/> For SERVICE or DELIVERY exactly one of the following fields must be set: date, date_from and date_to or text. */
    type?: 'DEFAULT' | 'SERVICE' | 'DELIVERY';
    date?: string;
    date_from?: string;
    date_to?: string;
    text?: string;
  };
  Document: {
    /** This information comes from the customer which can be set with customer_id. */
    address?: definitions['DocumentAddress'];
    attachment_ids?: number[];
    /** This information comes from the customer which can be set with customer_id. */
    label_address?: definitions['DocumentAddress'];
    /** Amount in cents  (e.g. "150" = 1.50€) */
    amount?: number;
    /** Amount in cents  (e.g. "150" = 1.50€) */
    amount_net?: number;
    bank_debit_form?: string;
    billing_country?: string;
    /** 0 === Net, 1 === Gross. */
    calc_vat_from?: 0 | 1;
    /** ID from the cancel document. Only for document type INVOICE. */
    cancel_id?: number;
    cash_allowance?: number;
    cash_allowance_days?: number;
    cash_allowance_text?: string;
    contact_id?: number;
    contact_label?: string;
    contact_text?: string;
    created_at?: string;
    currency?: string;
    customer_id?: number;
    customer_snapshot?: definitions['CustomerSnapshot'];
    discount?: string;
    discount_type?: 'PERCENT' | 'AMOUNT';
    document_date?: string;
    /** To change the value use grace_period. */
    due_date?: string;
    edited_at?: string;
    external_id?: string;
    replica_url?: string;
    /** will be replaced by its alias due_in_days. */
    grace_period?: number;
    /** due date in days. */
    due_in_days?: number;
    id?: number;
    is_archive?: boolean;
    /** This property is read only. To finish the document call /documents/{id}/done. */
    is_draft?: boolean;
    /** Marks a document as a replica from another software. */
    is_replica?: boolean;
    /** Indicates if a document is in the long term archive */
    is_cold?: boolean;
    /** Signals when the document should be moved to the long term archive */
    coldstorage_due_date?: string;
    /** Field holds all unique document_note of items for the document */
    item_notes?: string[];
    items?: definitions['DocumentPosition'][];
    last_postbox_id?: number;
    /** If omitted or null, the currently active login is used. */
    login_id?: number;
    number?: string;
    order_number?: string;
    buyer_reference?: string;
    paid_amount?: number;
    paid_at?: string;
    pdf_pages?: number;
    /** Default template is null or 'DE', default english is 'EN' and for all others use the numeric template ID. */
    pdf_template?: string;
    project_id?: number;
    /** This object is only available in document type RECURRING */
    recurring_options?: definitions['DocumentRecurring'];
    /** Reference document id */
    ref_id?: number;
    /** This object is only available in document type INVOICE or CREDIT. */
    service_date?: definitions['ServiceDate'];
    shipping_country?: string;
    /** This value can only be used in document type DELIVERY, ORDER, CHARGE or OFFER. NULL is default = not set. */
    status?: 'ACCEPT' | 'DONE' | 'DROPSHIPPING' | 'CANCEL';
    text?: string;
    text_prefix?: string;
    /** Overwrites the default vat-option text from the document layout. It is only displayed in documents with the type other than: Delivery, Dunning, Reminder or Letter and a different vat-option than null */
    text_tax?: string;
    title?: string;
    /** Can only set on create. */
    type?:
      | 'INVOICE'
      | 'RECURRING'
      | 'CREDIT'
      | 'OFFER'
      | 'REMINDER'
      | 'DUNNING'
      | 'STORNO'
      | 'STORNO_CREDIT'
      | 'DELIVERY'
      | 'PDF'
      | 'CHARGE'
      | 'CHARGE_CONFIRM'
      | 'LETTER'
      | 'ORDER'
      | 'PROFORMA_INVOICE'
      | 'STORNO_PROFORMA_INVOICE';
    /** If true and customer has shipping address then it will be used. */
    use_shipping_address?: boolean;
    vat_country?: string;
    vat_id?: string;
    fulfillment_country?: string;
    /** NULL: Normal steuerbar<br/> nStb: Nicht steuerbar (Drittland)<br/> nStbUstID: Nicht steuerbar (EU mit USt-IdNr.)<br/> nStbNoneUstID: Nicht steuerbar (EU ohne USt-IdNr.)<br/> nStbIm: Nicht steuerbarer Innenumsatz<br/> revc: Steuerschuldwechsel §13b (Inland)<br/> IG: Innergemeinschaftliche Lieferung<br/> AL: Ausfuhrlieferung<br/> sStfr: sonstige Steuerbefreiung<br/> smallBusiness: Kleinunternehmen (Keine MwSt.) */
    vat_option?:
      | 'NULL'
      | 'nStb'
      | 'nStbUstID'
      | 'nStbNoneUstID'
      | 'nStbIm'
      | 'revc'
      | 'IG'
      | 'AL'
      | 'sStfr'
      | 'smallBusiness';
  };
  Documents: definitions['List'] & {
    items?: definitions['Document'][];
  };
  CustomerGroup: {
    name: string;
    description?: string;
    /** Can be chosen freely */
    number: string;
    display_name?: string;
    id?: number;
  };
  CustomerGroups: definitions['List'] & {
    items?: definitions['CustomerGroup'][];
  };
  Task: {
    category?: 'CALL' | 'EMAIL' | 'FAX' | 'LUNCH' | 'MEETING' | 'TRAVEL' | 'CUSTOM';
    /** The name of your custom category. Can only have a value if "category" is "CUSTOM". */
    category_custom?: string;
    created_at?: string;
    customer_id?: number;
    description?: string;
    document_id?: number;
    /** The deadline */
    end_at?: string;
    /** The time when the task was marked as done */
    finish_at?: string;
    id?: number;
    /** When omitted or null, the currently active login is used */
    login_id?: number;
    name: string;
    position_id?: number;
    priority?: 'LOW' | 'NORMAL' | 'HIGH';
    project_id?: number;
    start_at?: string;
    status: 'WAITING' | 'PROCESSING' | 'DONE' | 'CANCEL';
    status_percent?: number;
  };
  Tasks: definitions['List'] & {
    items?: definitions['Task'][];
  };
  Project: {
    /** Project budget in cents (e.g. "150" = 1.50€) */
    budget_amount?: number;
    /** Time budget in minutes (e.g. "90" = 1 hour and 30 minutes) */
    budget_time?: number;
    customer_id?: number;
    /** Hourly rate in cents (e.g. "150" = 1.50€) */
    hourly_rate?: number;
    id?: number;
    /** If omitted or null, the currently active login is used */
    login_id?: number;
    name: string;
    note?: string;
    status?: 'OPEN' | 'DONE' | 'CANCEL';
    due_at?: string;
    consumed_time?: number;
    consumed_amount?: number;
  };
  Projects: definitions['List'] & {
    items?: definitions['Project'][];
  };
  Position: {
    id?: number;
    type?: 'PRODUCT' | 'SERVICE' | 'TEXT';
    number: string;
    /** The positions name or description */
    description: string;
    /** This field can be used in the document text areas with the liquid placeholder {{document.item_notes}}. Every note is only displayed once for every kind of product. This is useful if you want to add something like an instruction. */
    document_note?: string;
    /** Note for internal use */
    note?: string;
    unit?: string;
    /** The FAS-Account is the four-digit revenue account, in which the revenue will be entered when doing the export to your tax consultant. In case you want to split your revenue to several revenue accounts, please talk to your tax consultant before, to guarantee an unobstructed use of the interface. For every revenue element, there are number ranges, which can be used. Please avoid using combinations of numbers, which can not be used by your tax consultant. */
    export_identifier?: string;
    export_identifier_extended?: {
      /** Umsatzsteuerpflichtig */
      NULL?: { [key: string]: any };
      /** Nicht steuerbar (Drittland) */
      nStb?: { [key: string]: any };
      /** Nicht steuerbar (EU mit USt-IdNr.) */
      nStbUstID?: { [key: string]: any };
      /** Nicht steuerbar (EU ohne USt-IdNr.) */
      nStbNoneUstID?: { [key: string]: any };
      /** Nicht steuerbarer Innenumsatz */
      nStbIm?: { [key: string]: any };
      /** Steuerschuldwechsel §13b (Inland) */
      revc?: { [key: string]: any };
      /** Innergemeinschaftliche Lieferung */
      IG?: { [key: string]: any };
      /** Ausfuhrlieferung */
      AL?: { [key: string]: any };
      /** sonstige Steuerbefreiung */
      sStfr?: { [key: string]: any };
      /** Kleinunternehmen (Keine MwSt.) */
      smallBusiness?: { [key: string]: any };
    };
    login_id?: number;
    price_type?: 'BRUTTO' | 'NETTO';
    vat_percent?: number;
    /** Price in cents (e.g. "150" = 1.50€) */
    sale_price: number;
    /** Price for customers of group 2 in cents (e.g. "150" = 1.50€) */
    sale_price2?: number;
    /** Price for customers of group 3 in cents (e.g. "150" = 1.50€) */
    sale_price3?: number;
    /** Price for customers of group 4 in cents (e.g. "150" = 1.50€) */
    sale_price4?: number;
    /** Price for customers of group 5 in cents (e.g. "150" = 1.50€) */
    sale_price5?: number;
    /** Price for customers of group 6 in cents (e.g. "150" = 1.50€) */
    sale_price6?: number;
    /** Price for customers of group 7 in cents (e.g. "150" = 1.50€) */
    sale_price7?: number;
    /** Price for customers of group 8 in cents (e.g. "150" = 1.50€) */
    sale_price8?: number;
    /** Price for customers of group 9 in cents (e.g. "150" = 1.50€) */
    sale_price9?: number;
    /** Price for customers of group 10 in cents (e.g. "150" = 1.50€) */
    sale_price10?: number;
    /** Price in cents (e.g. "150" = 1.50€) */
    cost_price?: number;
    export_cost1?: string;
    export_cost2?: string;
    group_id?: number;
    /** Activates stock management for this position */
    stock?: 'YES' | 'NO';
    /** Current stock count */
    stock_count?: number;
    /** Notify when stock_count is lower than stock_limit */
    stock_limit_notify?: boolean;
    /** Notify frequency when stock_count is lower than stock_limit (ALWAYS, ONCE) */
    stock_limit_notify_frequency?: 'ALWAYS' | 'ONCE';
    stock_limit?: number;
    /** Used as the default quantity when adding this position to a document */
    quantity?: number;
  };
  Positions: definitions['List'] & {
    items?: definitions['Position'][];
  };
  PositionGroup: {
    description?: string;
    login_id?: number;
    name: string;
    number: string;
    display_name?: string;
    id?: number;
  };
  PositionGroups: definitions['List'] & {
    items?: definitions['PositionGroup'][];
  };
  TimeTracking: {
    cleared_at?: string;
    created_at?: string;
    date_from_at?: string;
    date_thru_at?: string;
    description: string;
    /** Hourly rate in cents (e.g. "150" = 1.50€) */
    hourly_rate?: number;
    id?: number;
    note?: string;
    /** Can be chosen freely */
    number?: string;
    position_id?: number;
    project_id?: number;
    /** If omitted or null, the currently active login is used. */
    login_id?: number;
    /** Tracked time in minutes */
    timer_value?: number;
  };
  TimeTrackings: definitions['List'] & {
    items?: definitions['TimeTracking'][];
  };
  TextTemplate: {
    can_modify?: boolean;
    id?: number;
    text: string;
    title: string;
  };
  TextTemplates: definitions['List'] & {
    items?: definitions['TextTemplate'][];
  };
  /** If customer_id, project_id and document_id are null then attachment has global access from web ui. */
  Attachment: {
    created_at?: string;
    customer_id?: number;
    document_id?: number;
    file_name?: string;
    id?: number;
    project_id?: number;
    /** In byte */
    size?: number;
  };
  Attachments: definitions['List'] & {
    items?: definitions['Attachment'][];
  };
  DocumentPayment: {
    amount: number;
    document_id: number;
    id?: number;
    is_overdue_fee?: boolean;
    login_id?: number;
    notice?: string;
    payment_at?: string;
    type?: string;
    provider?: string;
    reference?: string;
  };
  DocumentPayments: definitions['List'] & {
    items?: definitions['DocumentPayment'][];
  };
  PostBoxRequest: {
    to?: string;
    cc?: string;
    from?: string;
    subject?: string;
    message?: string;
    date?: string;
    /** When set to null, the setting on the customer is used */
    document_file_type?: 'default' | 'zugferd1' | 'zugferd2' | 'xrechnung' | 'xrechnung_xml';
  };
  PostBox: {
    id?: number;
    document_id?: number;
    to?: string;
    cc?: string;
    from?: string;
    subject?: string;
    message?: string;
    date?: string;
    created_at?: string;
    processed_at?: string;
    send_by_self?: boolean;
    send_with_attachment?: boolean;
    type?: 'FAX' | 'EMAIL' | 'POST';
    status?: 'WAITING' | 'PREPARE' | 'ERROR' | 'OK' | 'PROCESSING';
    status_msg?: string;
    login_id?: number;
    document_file_type?: 'default' | 'zugferd1' | 'zugferd2' | 'xrechnung' | 'xrechnung_xml';
  };
  PostBoxes: definitions['List'] & {
    items?: definitions['PostBox'][];
  };
  SEPAPayment: {
    /** Amount in cents (e.g. "150" = 1.50€) */
    amount: number;
    created_at?: string;
    /** If type is DEBIT, this field is overwritten with the selected bank account data on export. */
    creditor_bic?: string;
    /** Mandatory if type is CREDIT. If type is DEBIT, this field is overwritten with the selected bank account data on export. */
    creditor_iban?: string;
    /** Mandatory if type is CREDIT. If type is DEBIT, this field is overwritten with the selected bank account data on export. */
    creditor_name?: string;
    /** If type is CREDIT, this field is overwritten with the selected bank account data on export. */
    debitor_bic?: string;
    /** Mandatory if type is DEBIT. If type is CREDIT, this field is overwritten with the selected bank account data on export. */
    debitor_iban: string;
    /** Mandatory if type is DEBIT. If type is CREDIT, this field is overwritten with the selected bank account data on export. */
    debitor_name: string;
    /** Mandatory if type is DEBIT and the debitor's IBAN belongs to a country outside the EEA */
    debitor_address_line_1?: string;
    /** string */
    debitor_address_line2?: string;
    /** Mandatory if type is DEBIT and the debitor's IBAN belongs to a country outside the EEA */
    debitor_country?: string;
    document_id: number;
    /** If a date is set, this record is marked as exported */
    export_at?: string;
    export_error?: string;
    id?: number;
    /** CORE: SEPA Core Direct Debit<br/> COR1: SEPA-Basislastschrift COR1<br/> B2B: SEPA Business to Business Direct Debit */
    local_instrument: 'CORE' | 'COR1' | 'B2B';
    mandate_date_of_signature: string;
    mandate_id: string;
    reference: string;
    remittance_information?: string;
    /** Booking date */
    requested_at?: string;
    /** FRST: Erstlastschrift<br/> RCUR: Folgelastschrift<br/> OOFF: Einmallastschrift<br/> FNAL: Letztmalige Lastschrift */
    sequence_type: 'FRST' | 'OOFF' | 'FNAL' | 'RCUR';
    updated_at?: string;
    type?: 'DEBIT' | 'CREDIT';
  };
  SEPAPayments: definitions['List'] & {
    items?: definitions['SEPAPayment'][];
  };
  WebHook: {
    content_type: 'form' | 'json';
    description: string;
    events: (
      | 'document.create'
      | 'document.update'
      | 'document.completed'
      | 'document.deleted'
      | 'document.payment_add'
      | 'document.payment_delete'
      | 'customer.create'
      | 'customer.update'
      | 'customer.delete'
      | 'contact.create'
      | 'contact.update'
      | 'contact.delete'
      | 'position.create'
      | 'position.update'
      | 'position.delete'
      | 'postbox.create'
      | 'postbox.update'
      | 'postbox.delete'
      | 'postbox.sent'
    )[];
    id?: number;
    is_active?: boolean;
    last_response?: {
      date?: string;
      code?: number;
      response?: string;
    };
    secret: string;
    url: string;
  };
  WebHooks: definitions['List'] & {
    items?: definitions['WebHook'][];
  };
  PDFTemplate: {
    id?: string;
    name?: string;
    pdf_template?: string;
    document_type?: string;
  };
  PDFTemplates: {
    items?: definitions['PDFTemplate'][];
  };
  Discount: {
    id?: number;
    customer_id: number;
    /** The discount value depending on "discount_type" */
    discount?: number;
    /** AMOUNT subtracts the value in "discount" from the total<br/> QUANTITY subtracts the value in "discount" multiplied by quantity<br/> PERCENT uses the value in "discount" as a percentage<br/> FIX sets the value in "discount" as the new price */
    discount_type?: 'AMOUNT' | 'PERCENT' | 'QUANTITY' | 'FIX';
  };
  DiscountPosition: definitions['Discount'] & {
    position_id: number;
  };
  DiscountPositions: definitions['List'] & {
    items?: definitions['DiscountPosition'][];
  };
  DiscountPositionGroup: definitions['Discount'] & {
    position_group_id: number;
  };
  DiscountPositionGroups: definitions['List'] & {
    items?: definitions['DiscountPositionGroup'][];
  };
  Login: {
    id?: number;
    first_name?: string;
    last_name?: string;
    display_name?: string;
    phone?: string;
    email?: string;
    email_signature?: string;
    login_type?: 'ADMIN' | 'ASSISTANT';
    locale?: string;
    time_zone?: string;
    security?: definitions['LoginSecurity'];
  };
  Logins: definitions['List'] & {
    items?: definitions['Login'][];
  };
  SerialNumber: {
    id?: number;
    serial_number: string;
    position_id: number;
    document_id?: number;
    document_position_id?: number;
    used_at?: string;
    created_at?: string;
  };
  SerialNumbers: definitions['List'] & {
    items?: definitions['SerialNumber'][];
  };
  Stock: {
    id?: number;
    note?: string;
    stock_count: number;
    position_id: number;
    document_id?: number;
    document_position_id?: number;
    stored_at?: string;
    created_at?: string;
    updated_at?: string;
  };
  Stocks: definitions['List'] & {
    items?: definitions['Stock'][];
  };
  /** This object is only displayed if your request the login resource as an admin. Otherwise this property will be null. */
  LoginSecurity: {
    /** Shows if the login has two factor enabled for the login process */
    two_factor_enabled?: boolean;
    /** Shows if the login has recovery codes enabled to bypass two factor */
    recovery_codes_enabled?: boolean;
    /** Shows if the login has enabled to be notified if a new login is made from an unknown device. */
    notify_on_new_login_enabled?: boolean;
  };
}

export interface parameters {
  /** Limited the result. Default is 100. Maximum can be 1000. */
  LIMIT: number;
  /** Set current Page. Default is 1. */
  PAGE: number;
}

export interface operations {}
